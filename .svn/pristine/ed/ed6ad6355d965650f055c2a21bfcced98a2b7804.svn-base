import json

from reportlab.lib.styles import ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer

from base import BaseHandler

# Alignment
# TA_LEFT = 0
# TA_CENTER = 1
# TA_RIGHT = 2
# TA_JUSTIFY = 4

class PDFExportHandler(BaseHandler):
    def get(self):
        pass
    
    def post(self):
        pass

class PDFGenerate():
    page_elements = []
    document = None
    template = None

    def getDocument(self, document_str):
        self.document = json.loads(document_str)

    def getTemplate(self, template_file):
        temp = open(template_file, "r")
        self.template = json.load(temp)      
        temp.close()

    def _getStyle(self, paragraph_type):
        style_set = self.template[paragraph_type]
        style = ParagraphStyle(name=paragraph_type, **style_set)
        return style

    def callable(self, canvas, doc):
        pass

    def _generate_page_elements(self):
        ''' Style '''
        header_style = self._getStyle('header')
        element_style = self._getStyle('item')
        category_style = self._getStyle('category')
        ''' Header '''
        self.page_elements.append(Paragraph(self.document['header']['name'], header_style))
        self.page_elements.append(Paragraph(self.document['header']['address'],element_style))        
        self.page_elements.append(Paragraph(self.document['header']['phone'],element_style))
        ''' Page '''
        for cat in self.document['category']:
            self.page_elements.append(Paragraph(cat['title'],category_style))
            for items in cat['item']:
                self.page_elements.append(Paragraph(items['content'],element_style,bulletText='-'))
        self.page_elements.insert(0,Spacer(0,10))
    
    def generate_PDF(self):
        self._generate_page_elements()
        doc = SimpleDocTemplate("test.pdf")
        doc.build(self.page_elements, onFirstPage=self.callable, onLaterPages=self.callable)    

def extractCV(cv, currcv, cv_title):
    cv_ob = json.loads(cv)
    currcv_ob = json.loads(currcv)

    extract = {}
    category_list = []
    extract_list = []
    extract['header'] = cv_ob['header']
    for cv_key in currcv_ob['currentcv']:
        if cv_title == cv_key['title']:
            extract_list = cv_key['content']
    
    for dict_e in extract_list:
        for dict_t in cv_ob['category']:
            if dict_e['category'] == dict_t['id']:
                s_category = {}
                s_category['title'] = dict_t['title']
                s_category['item'] = []
                for order in dict_e['order']:
                    for item in dict_t['item']:
                        if order == item['id']:
                            s_category['item'].append(item)
                category_list.append(s_category)
                
    extract['category'] = category_list
    
    return json.dumps(extract)
    
    
                
                    
            
           