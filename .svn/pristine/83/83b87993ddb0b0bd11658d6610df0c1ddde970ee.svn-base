    # secrets store the secret information of the app
import secrets

# Library import
from simpleauth import SimpleAuthHandler

# Internal import
from base import BaseHandler

class LoginHandler(BaseHandler, SimpleAuthHandler):
    # Enable optional OAuth 2.0 CSRF guard
    OAUTH2_CSRF_STATE = True
    
    USER_ATTRS = {
        'facebook' : {
          'id'     : lambda idf: ('avatar_url','http://graph.facebook.com/{0}/picture?type=large'.format(idf)),
          'name'   : 'name',
          'link'   : 'link'
        },
        'google'   : {
          'picture': 'avatar_url',
          'name'   : 'name',
          'link'   : 'link'
        },
        'windows_live': {
          'avatar_url': 'avatar_url',
          'name'      : 'name',
          'link'      : 'link'
        },
        'twitter'  : {
          'profile_image_url': 'avatar_url',
          'screen_name'      : 'name',
          'link'             : 'link'
        },
        'linkedin' : {
          'picture-url'       : 'avatar_url',
          'first-name'        : 'name',
          'public-profile-url': 'link'
        },
    }

    def _on_signin(self, data, auth_info, provider):

        auth_id = '%s:%s' % (provider, data['id'])

        _attrs = self._to_user_attrs(data, self.USER_ATTRS[provider])
        
        add_attrs = {}
#        add_attrs['cv'] = json.loads('{"header": {"name": "Please add your full name","phone": "Please add your contact number","address": "Please add your address","gender": "male"},"category": []}')
#        add_attrs['currcv'] = json.loads('{"currentcv": []}')

        add_attrs['cv'] = '''{"header": {
                    "name": "Bond, James Bond",
                    "phone": "007",
                    "address": "Room 007, 10 Buckingham Road, MI6, London, UK, Postcode: LB00 7JB",
                    "gender": "male"
                },
                
                "category": [
                    {
                        "title": "Profile",
                        "id": "0",
                        "item": [
                            {
                                "id": "3",
                                "description": "profile for Google Co",
                                "content": "I am a multi-lingual student persuing a degree in Computer Science."
                            },
                            {
                                "id": "4",
                                "description": "profile for IBM",
                                "content": "Pt3 student applying for the post of Operations research."
                            }
                        ]
                    },
                    {
                        "title": "Education",
                        "id": "1",
                        "item": [
                            {
                                "id": "5",
                                "description": "A-levels",
                                "content": "Southampton College: 1A's 2B's and 3C's including Mathematics and ICT."
                            },
                            {
                                "id": "6",
                                "description": "University",
                                "content": "University of Southampton: 1st class in Pt1 and Pt2."
                            }
                        ]
                    },
                    {
                        "title": "Work Experience",
                        "id": "2",
                        "item": [
                            {
                                "id": "7",
                                "description": "Exon consultants",
                                "content": "Exon consultants(2011): worked as part of the development team of the new exon360 software."
                            }
                        ]
                    }
                ]
            }'''
        add_attrs['currcv'] = '''{
            "currentcv": [
                    {
                        "title": "IBM CV",
                        "content": [
                            {
                                "category": "0",
                                "order": ["4"]
                            },
                            {
                                "category": "2",
                                "order": ["7"]
                            },
                            {
                                "category": "1",
                                "order": ["6"]
                            }
                        ]
                    },
                    {
                        "title": "Google CV",
                        "content": [
                            {
                                "category": "0",
                                "order": ["3"]
                            },
                            {
                                "category": "1",
                                "order": ["5","6"]
                            }
                        ]
                    }
                ]
            }'''
        
        # Check if the user exists
        user = self.auth.store.user_model.get_by_auth_id(auth_id)
        
        if user:
            # Existing user
            user.populate(**_attrs)
            user.put()
            self.auth.set_session(self.auth.store.user_to_dict(user))
        else:
            # Update current 
            if self.logged_in:
                u = self.current_user
                u.populate(**_attrs)
                u.add_auth_id(auth_id)
            else:
                # Create a new user
                _attrs.update(add_attrs)
                ok, user = self.auth.store.user_model.create_user(auth_id, **_attrs)
                if ok:
                    self.auth.set_session(self.auth.store.user_to_dict(user))

        # Redirect to the home page
        self.redirect('/homepage')

    def logout(self):
        self.auth.unset_session()
        self.redirect('/')

    # TODO: Fixed handle exception
    def handle_exception(self, exception, debug):
        self.render('error.html', {'exception': exception})
    
    # Must have to use Simple Authentication
    def _callback_uri_for(self, provider):
        return self.uri_for('auth_callback', provider=provider, _full=True)
    
    # Must have to use Simple Authentication
    def _get_consumer_info_for(self, provider):
        return secrets.AUTH_CONFIG[provider]
    
    def _to_user_attrs(self, data, attrs_map):
        user_attrs = {}
        for k, v in attrs_map.iteritems():
            attr = (v, data.get(k)) if isinstance(v, str) else v(data.get(k))
            user_attrs.setdefault(*attr)
        return user_attrs
