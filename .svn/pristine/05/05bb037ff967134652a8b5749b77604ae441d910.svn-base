import cgi
import datetime
import urllib
import webapp2

from google.appengine.ext import db
from google.appengine.api import users

class MainPage(webapp2.RequestHandler):
    def get(self):
        
        # If the user is logged in
        #    then check if the uesr is a new user. 
        #        if yes, display new user registration
        if users.get_current_user():
            # TODO display normal page
            
#            self.response.headers['Content-Type'] = 'text/html'
            self.response.write('User nickname is ' + users.get_current_user().nickname())

            # space to generate the web content
        else:
            self.redirect('/login')
#            self.redirect(users.create_login_url(self.request.uri))

        self.response.out.write("""
          <html>
            <body>
              <form action="/store" method="post">
                <div><textarea name="content" rows="3" cols="60"></textarea></div>
                <div><input type="submit" value="Submit"></div>
              </form>
            </body>
          </html>""")
        self.response.write('<a href = "/listAll">List all entry</a>')

        # Request entry of one user given email address
        self.response.out.write("""
          <html>
            <body>
              <form action="/list" method="post">
                Email Address: <input type="text" name="user_email"><br>
                <input type="submit" value="Submit">
              </form>
            </body>
          </html>""")

      
# Each entry stores UserProperty and StringProperty
class DataEntry(db.Model):
    user = db.UserProperty()
    json = db.StringProperty(multiline=True)

# Store an entry to database. This applies to BOTH new entry and entry update.
class StoreEntry(webapp2.RequestHandler):
    def post(self):
        self.response.out.write('<html><body>Data stored<pre>')
        data_to_be_stored = self.request.get('content') # "content" is the textarea name
        
        current_user = users.get_current_user() # Get current user. 
        email_address = current_user.email() # Get email of current user.
        
        entries = listEntry(email_address) # Try to fetch entries from database of this user.
        if entries.count() == 0 : # Check if the user is already in the database
            entry_to_be_stored = DataEntry() # If no entry returns, create new DataEntry object
            entry_to_be_stored.user = users.get_current_user() # Set DataEntry UserProperty to users.get_current_user()
        else: 
            # Update an entry
            for entry in entries:
                key = entry.key();
                entry_to_be_stored = DataEntry.get(key)
        
        entry_to_be_stored.json = data_to_be_stored # Set DataEntry StringProperty to data_to_be_stored
        entry_to_be_stored.put() # Put this entry into database
        # End of storing data
        
        self.response.out.write(cgi.escape(self.request.get('content')))
        self.response.out.write("Content stored")
        self.response.out.write('</pre></body></html>')

# Request entry from database
def listEntry(email):
    user = users.User(email) # Create a user object with user_email
    entries = DataEntry.gql("WHERE user = :1", user) # Get entry of this user
    return entries
        
# Post request. Require data: user email address
class ListOneEntry(webapp2.RequestHandler):
    def post(self):
        self.response.out.write('<html><body>List all entries<pre>')
        # Get all data from databse
        user_email = self.request.get('user_email') # Get user email address from post request
        
        entries = listEntry(user_email)
        
        # This should return only one entry because one user should only have one JSON. 
        # Even there is only one entry, you still need the for loop. 
        for entry in entries:
            self.response.out.write('<b>%s</b> Data:' % entry.user)
            self.response.out.write('<blockquote>%s</blockquote>' % entry.json)
        
        self.response.out.write('</pre></body></html>')
          
# List all entry. Get request. url: /listAll
class ListAllEntry(webapp2.RequestHandler):
    def get(self):
        self.response.out.write('<html><body>List all entries<pre>')
        
        # Get all data from databse
        entries = DataEntry.gql("")
        
        for entry in entries:
            if entry.user:
                self.response.out.write('<b>%s</b> Data:' % entry.user)
            else:
                self.response.out.write('An anonymous data entry:')
            self.response.out.write('<blockquote>%s</blockquote>' % entry.json)
        
        self.response.out.write('</pre></body></html>')
        

app = webapp2.WSGIApplication(
                              [('/', MainPage), ('/store', StoreEntry), ('/listAll', ListAllEntry), ('/list', ListOneEntry)],
                              debug=True)


# Contain all the routing for the app

#config = {}

#app = webapp2.WSGIApplication(routes = [
#                               webapp2.Route('/', 'mainpage.mainpageHandler.MainPage'),
#                               webapp2.Route('/login/', 'login.loginHandler.LoginPage')],
#                              config = config
#                              )
# Appstat : cache for the application